
import { Marker } from 'react-native-maps';
import MapView from 'react-native-maps';
import { StyleSheet, Text, View, Dimensions } from 'react-native';
import * as React from 'react';
import * as Permissions from 'expo-permissions';
import * as Location from 'expo-location';

/*
mapView.showsUserLocation = YES;
[mapView setCenterCoordinate:mapView.userLocation.location.coordinate animated:YES];
*/

export default class App extends React.Component{

  state = {
    location:{},
    errorMessage: ''
  }
  
  componentWillUnmount(){
    const { width, height } = Dimensions.get('window')
    const ASPECT_RATIO = width / height
    this._getLocation();
    const lat =parseFloat(location.latitude)
    const lng =parseFloat(location.long)
    const latDelta = 0.025
    const lngDelta = latDelta * ASPECT_RATIO
    this.setState({
      region: {
        latitude: lat,
        longitude: lng,
        latitudeDelta: latDelta,
        longitudeDelta: lngDelta
      }
    })   
  }

  _getLocation = async () => {
    const {status} = await location.requestPermissionAsync()

    if(status != 'granted'){
      console.log('Permission not granted')
      this.setState({
        errorMessage: 'Permission not granted'
      })
    }

    const location = await Location.getCurrentPositionAsync();

    this.setState({
      location
    })
  }
  render(){
    return (
      <View style={styles.container}>
      <MapView style={styles.map} initialRegion={{latitude: lat,longitude: lng,latitudeDelta: latDelta,longitudeDelta: longDelta}}/>
      </View>
    );
  }
}
const style = StyleSheet.create({
  container:{
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  }
});
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  map: {
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
  paragraph: {
    margin: 24,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#34495e',
  },
});


/*
_getLocationAsync = async () => {
  let { status } = await Permissions.askAsync(Permissions.LOCATION);
  if (status !== 'granted') {
    this.setState({
      locationResult: 'Permission to access location was denied',
    });
  } else {
    this.setState({ hasLocationPermissions: true });
  }

  let location = await Location.getCurrentPositionAsync({});
  this.setState({ locationResult: JSON.stringify(location) });
  
  // Center the map on the location we just fetched.
  this.setState({mapRegion: { latitude: location.coords.latitude, longitude: location.coords.longitude, latitudeDelta: 0.0922, longitudeDelta: 0.0421 }});
};


function getInitialState() {
  return {
    region: {
      latitude: 37.78825,
      longitude: -122.4324,
      latitudeDelta: 0.0922,
      longitudeDelta: 0.0421,
    },
  };
}

function onRegionChange(region) {
  this.setState({ region });
}

export default function App() {
  return (
    <View style={styles.container}>
    <MapView style={styles.map} initialRegion={{latitude: 41.9,longitude: 87.65,latitudeDelta: 0.04,longitudeDelta: 0.05}}/>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  map: {
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
  paragraph: {
    margin: 24,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#34495e',
  },
});
*/

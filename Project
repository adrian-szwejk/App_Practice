

import 'react-native-gesture-handler';
import * as React from 'react';
import { useState, useEffect,useRef } from 'react';
import { Platform, Text, View, Button,StyleSheet,Dimensions,Image,TouchableOpacity } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import MapView from 'react-native-maps';
import Constants from 'expo-constants'; 
import * as Location from 'expo-location';
import { Marker } from "react-native-maps";
import * as ImagePicker from 'expo-image-picker';
import * as Sharing from 'expo-sharing'; 



//Map screen
function MapScreens(){
  const [location, setLocation] = useState({
    latitude: 51.5078788,
    longitude: -0.0877321,
    latitudeDelta: 0.005,
    longitudeDelta: 0.005
  });
  const [marker, setMarker] = useState({
    latitude: 42.1635296,
    longitude: -87.8809898,
    latitudeDelta: 0.005,
    longitudeDelta: 0.005
  });
  const [errorMsg, setErrorMsg] = useState(null);
  let mapRef = useRef(null);

  useEffect(() => {
    (async () => {
      if (Platform.OS === 'android' && !Constants.isDevice) {
        setErrorMsg(
          'Oops, this will not work on Snack in an Android emulator. Try it on your device!'
        );
        return;
      }
      let { status } = await Location.requestPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    })();
  }, []);

  let text = 'Waiting..';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }
  

  var arr = new Array();
  arr=text.split(",");
  var dict={};
  for(var x=0; x<arr.length;x++){
    var arrs = new Array();
    arrs=arr[x].split(":");
    dict[arrs[0]]=arrs[1]
  }
  var lat=parseFloat(dict['"latitude"'])
  var lng=parseFloat(dict['"longitude"'])
  var lati=parseFloat(42.2635296)
  var long=parseFloat(-87.9809898)
  var truth
  if(parseFloat(lati.toFixed(5))==parseFloat(lat.toFixed(5))){
    truth=true
    lati=parseFloat(lat.toFixed(5))
  }
  else{
    truth =false
    
  }
  if(parseFloat(long.toFixed(5))==parseFloat(lng.toFixed(5))){
    truth=true
    long=parseFloat(lng.toFixed(5))
  }
  else{
    truth =false
    
  }
  return (
    <View style={mapstyles.container}>
      <MapView style={mapstyles.map} showsUserLocation={true} followsUserLocation={true} showsCompass={true} initialRegion={{latitude:Number(lati),longitude:Number(long),latitudeDelta: 0.005,longitudeDelta: 0.005}}/>
      <MapView.Marker coordinate={{latitude:42.3635296,longitude:-87.8809898,latitudeDelta: 0.005,longitudeDelta: 0.005}} />
    </View>
  );
}
function MapScreen() {
  return (
      <Stack.Navigator initialRouteName="MapScreens">
        <Stack.Screen name="Map" component={MapScreens}options={{title: 'Map',headerStyle: {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
      </Stack.Navigator>
  );
}



//Share
function ImageSharingScreen({navigation}) {
  const [selectedImage, setSelectedImage] = React.useState(null);
  let openImagePickerAsync = async () => {
    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();

    if (permissionResult.granted === false) {
      alert("Permission to access camera roll is required!");
      return;
    }

    let pickerResult = await ImagePicker.launchImageLibraryAsync();
    console.log(pickerResult);

    setSelectedImage({ localUri: pickerResult.uri });
  };
  let openShareDialogAsync = async () => {
    if (!(await Sharing.isAvailableAsync())) {
      alert(`Uh oh, sharing isn't available on your platform`);
      return;
    }

    await Sharing.shareAsync(selectedImage.localUri);
  }; 
  if (selectedImage !== null) {
    return (
      <View style={styles.container}>
        <Image source={{ uri: selectedImage.localUri }} style={styles.thumbnail} />
        <TouchableOpacity onPress={openShareDialogAsync} style={styles.button}>
          <Text style={styles.buttonText}>Share this photo</Text>
        </TouchableOpacity>
        <Button onPress={() => navigation.goBack()} title="Go Back" />
        </View>
    );
  }
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <TouchableOpacity onPress={openImagePickerAsync} style={styles.button}>
        <Text style={styles.buttonText}>Pick a photo</Text>
      </TouchableOpacity>
      <Button onPress={() => navigation.goBack()} title="Go Back" />
    </View>
  ); 
}
function LocationSharingScreen({navigation}) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.goBack()} title="Go Back" />
    </View>
  ); 
}
function SharingScreen({navigation}) {
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate("Image Sharing")} title="Image Sharing" />
      <Button onPress={() => navigation.navigate("Location Sharing")} title="Location Sharing" />
    </View>
  ); 
}
function ShareScreen() {
  return (
    <Stack.Navigator initialRouteName="Details">
      <Stack.Screen name="Sharing" component={SharingScreen}options={{title: 'Share',headerStyle: {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
      <Stack.Screen name="Image Sharing" component={ImageSharingScreen}options={{title: 'Image Share',headerStyle: {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
      <Stack.Screen name="Location Sharing" component={LocationSharingScreen}options={{title: 'Location Share',headerStyle: {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
    </Stack.Navigator>
  );
}


//Settings
function AccountScreen({navigation}){
  return(
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.goBack()} title="Go Back" />
    </View>
  )
}
function PrivacyScreen({navigation}){
  return(
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.goBack()} title="Go Back" />
    </View>
  )
}
function NotificationScreen({navigation}){
  return(
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.goBack()} title="Go Back" />
    </View>
  )
}
function HelpScreen({navigation}){
  return(
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.goBack()} title="Go Back" />
    </View>
  )
}
function SettingScreen({navigation}){
  return(
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Button onPress={() => navigation.navigate("Account")} title="Account" />
      <Button onPress={() => navigation.navigate("Privacy")} title="Privacy" />
      <Button onPress={() => navigation.navigate("Notifications")} title="Notifications" />
      <Button onPress={() => navigation.navigate("Help")} title="Help" />
    </View>
  )
}
function SettingsScreen() {
  return (
      <Stack.Navigator initialRouteName="Settings">
        <Stack.Screen name="Settings" component={SettingScreen}options={{title: 'Settings Screen',headerStyle: {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
        <Stack.Screen name="Account" component={AccountScreen}options={{title: 'Account Screen',headerStyle: {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
        <Stack.Screen name="Privacy" component={PrivacyScreen}options={{title: 'Privacy Screen',headerStyle: {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
        <Stack.Screen name="Notifications" component={NotificationScreen}options={{title: 'Notifications Screen',headerStyle:  {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
        <Stack.Screen name="Help" component={HelpScreen}options={{title: 'Help Screen',headerStyle: {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
      </Stack.Navigator>
  );
}


//Feed screen
function FeedsScreen({navigation}){
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text style={{ fontSize: 50 }}>Feed</Text>
    </View>
  ); 
}
function FeedScreen() {
  return (
    <Stack.Navigator initialRouteName="Details">
      <Stack.Screen name="Feed Screen" component={FeedsScreen}options={{title: 'Feed Screen',headerStyle: {backgroundColor:'#0038FF'},headerTintColor: '#fff',headerTitleStyle: {fontWeight: 'bold',},}} />
    </Stack.Navigator>
  );
}
function HomeScreen() {
  return (
      <Tab.Navigator initialRouteName="Feed">
        <Tab.Screen name="Feed" component={FeedScreen} />
        <Tab.Screen name="Map" component={MapScreen} />
        <Tab.Screen name="Share" component={ShareScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
  );
}

//Navigation/Home screen
const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();
function Home({navigation}){
  return (
    <View style={styles.container}>
      <Text style={{ fontSize: 50 }}>Home</Text>
      <Button onPress={() => navigation.navigate("Home Screen")} title="Enter app" />
    </View>
  ); 
}
export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{headerShown: false,}}>
        <Stack.Screen name="Home" component={Home}/>
        <Stack.Screen name="Home Screen" component={HomeScreen}/>
      </Stack.Navigator>
    </NavigationContainer>
  );
}

var colors=['#C0392B','#E67E22','#EFEE00','#27AE60','#3498DB','#D6EAF8','#8E44AD']
function getRandom(min, max) {
  return Math.random() * (max - min) + min;
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    backgroundColor: "blue",
    padding: 10,
    borderRadius: 20,
  },
  buttonText: {
    fontSize: 30,
    color: '#fff',
  }, 
});

const mapstyles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  map: {
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
});


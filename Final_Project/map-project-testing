import{ Component } from 'react';
import { Marker } from 'react-native-maps';
import MapView from 'react-native-maps';
import { StyleSheet, Text, View, Dimensions } from 'react-native';
import * as React from 'react';
import * as Location from 'expo-location';
import MapViewDirections from 'react-native-maps-directions';

const origin = {latitude:42.2635296,longitude:-87.9809898};
const destination = {latitude:42.2272,longitude:-87.9495};


const { width, height } = Dimensions.get("window");
const entireScreenHeight = Dimensions.get('window').height;
const rem = entireScreenHeight / 380;
const entireScreenWidth = Dimensions.get('window').width;
const wid = entireScreenWidth / 380;

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      mapRegion: null,
      hasLocationPermissions: false,
      locationResult: null,
      location: null,
      index: 0,
      markers: global.markers,
      region: {
        latitude: 45.52220671242907,
        longitude: -122.6653281029795,
        latitudeDelta: 0.02864195044303443,
        longitudeDelta: 0.020142817690068,
      },
    };
  }
  componentDidMount() {
    this.getLocationAsync();
  }
  handleMapRegionChange = (map) => {
    //console.log(map);
    this.setState({ mapRegion: map });
  }
  async getLocationAsync() {
    let { status } = await Location.requestPermissionsAsync();
    if (status !== 'granted') {
      this.setState({
        locationResult: 'Permission to access location was denied',
      });
    } else {
      this.setState({ hasLocationPermissions: true });
    }

    let location = await Location.getCurrentPositionAsync({});
    console.log(location)
    this.setState({ mapRegion: { latitude: location.coords.latitude, longitude: location.coords.longitude, latitudeDelta: 0.005, longitudeDelta: 0.005 } });
    this.setState({ locationResult: JSON.stringify(location) });
    this.setState({ location: { latitude: location.coords.latitude, longitude: location.coords.longitude } });

    // Center the map on the location we just fetched.
  }
  render() {
    
    return (
    <MapView
      ref={map => this.map = map}
      initialRegion={this.state.mapRegion}
      style={styles.map}
      showsUserLocation={true} 
      showsCompass={true} 
      showsMyLocationButton={true}
      showsPointsOfInterest={true}
      moveOnMarkerPress={true}
      
    >
      <Marker pinColor= 'blue' coordinate= {{latitude:42.2635296,longitude:-87.9809898,latitudeDelta: 0.005,longitudeDelta: 0.005}} key={0}  title={'Home'} description={'Where I live'} />
      <Marker pinColor= 'red' coordinate= {{latitude:42.2272,longitude:-87.9495,latitudeDelta: 0.005,longitudeDelta: 0.005}} key={1} title={'School'} description={'Where I learn'} />
      <Marker pinColor= 'green' coordinate= {{latitude:42.2139721,longitude:-87.932254,latitudeDelta: 0.005,longitudeDelta: 0.005}} key={2} title={'Half Day Forest Preserve'} description={'Where I run'} />
      
    </MapView>
    )
  }
}
/*
<MapViewDirections
        origin={origin}
        destination={destination}
        apikey={GOOGLE_MAPS_APIKEY}
        strokeWidth={3}
        strokeColor="hotpink"
        optimizeWaypoints={true}
      />
*/

   

export default function play_app(){
  return(
    new App()
  )
}
play_app.prototype = React.Component.prototype



const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  halfcontainer: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    width: (Dimensions.get('window').width)/2,
    height: Dimensions.get('window').height,
  },
  map: {
    width: Dimensions.get('window').width,
    height: Dimensions.get('window').height,
  },
  halfmap: {
    width: (Dimensions.get('window').width)/2,
    height: Dimensions.get('window').height,
  },
  paragraph: {
    margin: 24,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#34495e',
  },
});



